package LoginServer;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Scanner;

public class Utils {
	public static final int BUFF_LENGTH = 1024 * 6;
	public static final int HELLO_LENGTH = 256;
	public static final byte[] MEET = DataUsed.meet;
	/**
	 * @param client
	 *            �����µĿͻ�������ʱ���ͷ��͵�һ��256��byte[] ���顣
	 * @throws IOException
	 */
	public static void newClientConnect(ClientStructs client) throws Exception {
		OutputStream out = client.getClient().getOutputStream();
		InputStream in = client.getClient().getInputStream();
		out.write(MEET, 0, MEET.length);
		ReadPackage rp = new ReadPackage("./Package-213斗士.txt");//获得总共recv的长度 
		ReadPackage weapon = new ReadPackage("./Item.txt");
		int num = rp.getTotalRecv();
		//System.out.print(num);
		Scanner scanner = new Scanner(System.in);
		while (true) {
			byte[] equip1 ={0x0A,0x14,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x0D,0x14,(byte) 0xBD,0x00,0x1E,(byte) 0xB8,0x01,0x00,0x00};
									byte[] equip2 ={0x0A,0x14,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x0D,0x14, (byte) 0xBD,0x00,0x1F,0x20,0x01,0x00,0x00};
									byte[] equip3 ={0x0A,0x14,0x00,0x00,(byte) 0x9E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					(byte) 0x94,0x14,0x7E,0x00,0x00,0x00,0x00,0x00,(byte) 0xBB,(byte) 0xDC,(byte) 0xFE,0x3A,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x33,0x33,0x73,0x3F,0x69,0x24,(byte) 0x80,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
									byte[] equip4 ={0x0A,0x14,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x05,0x14, (byte) 0xBD,0x00,0x2D,0x69,0x24,(byte) 0x80,0x3F,0x00,0x00,0x11,0x44,(byte) 0x9F,(byte) 0xB0,(byte) 0xDC,0x3E};
									byte[] equip5 ={0x0A,0x14,0x00,0x00,(byte) 0x9E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					(byte) 0x94,0x14,0x7E,0x00,0x00,0x00,0x00,0x00,(byte) 0xBB,(byte) 0xDC,(byte) 0xFE,0x3A,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x33,0x33,0x73,0x3F,0x69,0x24,(byte) 0x80,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
									byte[] equip6 ={0x0A,0x14,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

					0x09,0x14, 0x32,0x00,0x08};
									
			switch (scanner.nextInt()) {
			case 1:   //21
				for(int i=9;i<19;i++){
					out.write(rp.readRecv(i));
				}
			    byte[] temp = dataCommbine.commbineData(rp.readRecv(20), rp.readRecv(21));
				byte[] result = dataCommbine.commbineData(rp.readRecv(19),temp);
				out.write(result);
				out.write(rp.readRecv(22));
				out.write(rp.readRecv(23));
			/*	 byte[] c = rp.readRecv(19);
				 for(int i=196*16;i<c.length;i++){
					 c[i] = 0;
				 }
				 out.write(c);*/
				//out.write(result);
				//out.write(rp.readRecv(20));
		/*		byte[] d = rp.readRecv(19);
				for(int j = 16*14;j<d.length;j++)
					d[j] = 0;
					out.write(d);
				break;*/
				break;
			case 2:
				//18 18是加载完成的标识
				//out.write(rp.readRecv(20));
				for(int i=24;i<num;i++){
					out.write(rp.readRecv(i));
				}
				break;
			case 3:
				for(int i=76;i<78;i++){
					out.write(rp.readRecv(i));
				
				}
				break;
			case 4:
				out.write(rp.readRecv(1));
				out.write(rp.readRecv(2));
				
				break;
			case 5:
				out.write(rp.readRecv(3));
				out.write(rp.readRecv(4));
				break;
			case 6:
				out.write(rp.readRecv(5));
				out.write(rp.readRecv(6));
		
				break;
			case 7:
				//D1-D7
				//D0 :CBSNotiWearItem 
				//D1 CBSNotiWearItem
				//d2 take off item
				//d3 notiupdatewearitem
				//d4 NOTI INVE ITEM
				// D5 CBSNotiInvenRemoveItem
				//D6 CBSNotiInvenUpdateItem
				//D7 CBSNotiInvenArrangeItem
				//0258 clanmemberinfo
				// 0259 CBSNotiClanApplicantInfo
				//0284 CBSNotiClanTell
				//02bd questinfo
		      byte[] b = {0,0,0,0,0,0};
					
					for(int i=0x0B;i<0xff;i++){
						for(int j=0xB0;j<0xff;j++){
							b[0] = (byte) j;
							b[1] = (byte) i;
							out.write(rp.readRecv(7));
							out.write(b);
							Thread.sleep(100);
						}
					}
					
				
				
				break;
			case 8:
				//0x0bbb player server info
				//0x0bba no character
				
				out.write(rp.readRecv(7));
				out.write(rp.readRecv(8));
				break;
			case 9:
				out.write(weapon.readRecv(3));
				out.write(weapon.readRecv(4));
				break;
			case 10:
				out.write(weapon.readRecv(5));
				out.write(weapon.readRecv(6));
				break;
			case 11:
				out.write(weapon.readRecv(7));
				out.write(weapon.readRecv(8));
				break;
			case 12:
				out.write(weapon.readRecv(9));
				out.write(weapon.readRecv(10));
				break;
			case 13:
				/*说话*/
				out.write(weapon.readRecv(11));
				out.write(weapon.readRecv(12));
				out.write(weapon.readRecv(13));
				break;
			case 15:
				
			
				break;
			case 16:
		
				break;
			case 17:
		
				break;
			case 18:
			
				break;
			case 19:
		
				break;
			case 20:
	
				break;
			case 21:
		
				break;
			}
			
		}

	}
}
